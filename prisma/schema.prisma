generator client {
  provider = "prisma-client-js"
}

generator kysely {
    provider = "prisma-kysely"
    output = "./keysley"
    fileName = "types.ts"
    enumFileName = "enums.ts"
}

generator zod-prisma-types {
  provider                         = "zod-prisma-types"
  output                           = "./zod" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is false
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id BigInt @id @db.BigInt() @default(autoincrement())
  /// @zod.string.max(100)
  pass_hash String @db.VarChar(100)
  /// @zod.string.max(126)
  first_name  String @db.VarChar(126)
  /// @zod.string.max(126)
  last_name  String @db.VarChar(126)
  is_verified Boolean @default(false)
  //weight in grams and height in mm
  weight Int? @db.Integer()
  goal_weight Int? @db.Integer()
  height Int? @db.Integer()
  status Boolean @default(true)
  user_auth_token UserAuthToken[]
  user_refresh_token UserRefreshToken[]
  user_role UserRole[]
  user_email UserEmail[]
}

enum Roles {
  USER
  ADMIN  
}

model UserRole {
  id BigInt @id @db.BigInt() @default(autoincrement())
  user User @relation(fields: [user_id], references: [id])
  user_id BigInt @db.BigInt()
  role Roles
  status Boolean @default(true)
  @@unique([user_id, role, status])
}

model UserAuthToken {
  id BigInt @id @db.BigInt() @default(autoincrement())
  user User @relation(fields: [user_id], references: [id])
  user_id BigInt @db.BigInt()
  /// @zod.string.max(500)
  token String @db.VarChar(500) @unique
  issued_at DateTime
  expire_at DateTime
  created_at DateTime @default(now())
}

model UserRefreshToken {
  id BigInt @id @db.BigInt() @default(autoincrement())
  user User @relation(fields: [user_id], references: [id])
  user_id BigInt @db.BigInt()
  /// @zod.string.max(500)
  token String @db.VarChar(500) @unique
  issued_at DateTime
  expire_at DateTime
  created_at DateTime @default(now())
}


// is_created = once the user for this email is created then turn this to true. No more OTP to this email once user is created
// status field = if the user is deleted - turn this to false, turn is created to false and set user_id to null. 
// If the user then tries to again create the account with same email then process starts anew with new user_id getting linked to this email and status being set to true
model UserEmail {
  id BigInt @id @db.BigInt() @default(autoincrement())
  user User? @relation(fields: [user_id], references: [id])
  user_id BigInt? @db.BigInt() @unique
  is_created Boolean @default(false)
  /// @zod.string.max(256)
  email String  @db.VarChar(256) @unique
  status Boolean @default(true)
  userOtp UserEmailOtp[]
}


model UserEmailOtp {
  id BigInt @id @db.BigInt() @default(autoincrement())
  email UserEmail @relation(fields: [email_id], references: [id])
  email_id BigInt @db.BigInt() @unique
  otp Int @db.Integer()
  expire_at DateTime
  resend_expire_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

// model UserSearch - user id, search term - suggestion selected: boolean, if selected - selection id.
// if not selected - full search page -> search chosen from list

// model CustomFood - user id, food description. 

model Food {
  id BigInt @id @db.BigInt() @default(autoincrement())
  fdc_id BigInt? @db.BigInt() @unique
  /// @zod.string.max(500)
  description String @db.VarChar(500) @unique
  food_nutrient FoodNutrient[]
  food_tags FoodTag[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}


//type
// 1 - duplicate fdc id
// 2 - duplicate description
// 3 - both duplicate
model DuplicateFood {
  id BigInt @id @db.BigInt() @default(autoincrement())
  /// @zod.string.max(500)
  description String @db.VarChar(500) 
  fdc_id BigInt? @db.BigInt() 
  type Int @db.SmallInt()
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

enum Units {
  G
  IU
  KCAL
  MCG_RE
  MG
  MG_ATE
  MG_GAE
  PH
  SP_GR
  UG
  UMOL_TE
  kJ
}

model Nutrient {
  id BigInt @id @db.BigInt() @default(autoincrement())
  fdc_nutrient_id BigInt @db.BigInt() @unique
  name String @db.VarChar(200)
  unit_name Units?
  nutrient_nbr Int? @db.Integer() @unique
  rank Int? @db.Integer()
  food_nutrient FoodNutrient[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

model FoodNutrient {
  id BigInt @id @db.BigInt() @default(autoincrement())
  food Food @relation(fields: [food_id], references: [id])
  food_id BigInt @db.BigInt()
  nutrient Nutrient @relation(fields: [nutrient_id], references: [id])
  nutrient_id BigInt @db.BigInt()
  //this will be multiplied by 1000 when saving
  quantity Int @db.Integer() 
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
  @@unique([food_id,nutrient_id])
}

model Tag {
  id BigInt @id @db.BigInt() @default(autoincrement())
  /// @zod.string.max(100)
  tag_name String @db.VarChar(100) @unique
  food_tags FoodTag[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

model FoodTag {
  id BigInt @id @db.BigInt() @default(autoincrement())
  food Food @relation(fields: [food_id], references: [id])
  food_id BigInt @db.BigInt()
  tag Tag @relation(fields: [tag_id], references: [id])
  tag_id BigInt @db.BigInt()
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
  @@unique([food_id,tag_id])
}