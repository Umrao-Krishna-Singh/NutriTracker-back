generator client {
  provider = "prisma-client-js"
}

generator kysely {
    provider = "prisma-kysely"
    output = "./keysley"
    fileName = "types.ts"
    enumFileName = "enums.ts"
}

generator zod-prisma-types {
  provider                         = "zod-prisma-types"
  output                           = "./zod" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is false
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @db.UnsignedInt() @default(autoincrement()) 
  /// @zod.string.max(80)
  username String @db.VarChar(80) @unique
  /// @zod.string.max(126)
  fullname  String @db.VarChar(126)
  /// @zod.string.max(256)
  email String?  @db.VarChar(256) @unique
}

model Food {
  id Int @id @db.UnsignedInt() @default(autoincrement())
  /// @zod.string.max(300)
  description String @db.VarChar(300) @unique
  food_nutrition FoodNutrition[]
  fdc_id Int? @db.UnsignedInt() @unique
  food_tags FoodTags[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

model DupFoodDescriptions {
  id Int @id @db.UnsignedInt() @default(autoincrement())
  /// @zod.string.max(300)
  description String @db.VarChar(300) @unique
  fdc_id Int @db.UnsignedInt() @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

model Nutrition {
  id Int @id @db.UnsignedInt() @default(autoincrement())
  name String @db.VarChar(200) @unique
  fdc_nutrient_id Int? @db.UnsignedInt() @unique
  food_nutrition FoodNutrition[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

model FoodNutrition {
  id Int @id @db.UnsignedInt() @default(autoincrement())
  food Food @relation(fields: [food_id], references: [id])
  food_id Int @db.UnsignedInt()
  nutrition Nutrition @relation(fields: [nutrition_id], references: [id])
  nutrition_id Int @db.UnsignedInt()
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

model Tag {
  id Int @id @db.UnsignedInt() @default(autoincrement())
  tag_name String @db.VarChar(100) @unique
  food_tags FoodTags[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

model FoodTags {
  id Int @id @db.UnsignedInt() @default(autoincrement())  
  food Food @relation(fields: [food_id], references: [id])
  food_id Int @db.UnsignedInt()
  tag Tag @relation(fields: [tag_id], references: [id])
  tag_id Int @db.UnsignedInt()
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}