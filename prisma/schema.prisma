generator client {
  provider = "prisma-client-js"
}

generator kysely {
    provider = "prisma-kysely"
    output = "./keysley"
    fileName = "types.ts"
    enumFileName = "enums.ts"
}

generator zod-prisma-types {
  provider                         = "zod-prisma-types"
  output                           = "./zod" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is false
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @db.UnsignedInt() @default(autoincrement()) 
  /// @zod.string.max(80)
  username String @db.VarChar(80) @unique
  /// @zod.string.max(100)
  password_hash String @db.VarChar(100)
  /// @zod.string.max(126)
  fullname  String @db.VarChar(126)
  /// @zod.string.max(256)
  email String  @db.VarChar(256) @unique
  is_verified Boolean @default(false)
  //weight in grams and height in mm
  weight Int? @db.UnsignedMediumInt()
  goal_weight Int? @db.UnsignedMediumInt()
  height Int? @db.UnsignedSmallInt()
  status Boolean @default(true)
  user_auth_token UserAuthToken[]
  user_refresh_token UserRefreshToken[]
}

model UserAuthToken {
  id Int @id @db.UnsignedInt() @default(autoincrement()) 
  user User @relation(fields: [user_id], references: [id])
  user_id Int @db.UnsignedInt()
  /// @zod.string.max(500)
  token String @db.VarChar(500) @unique
  issued_at DateTime
  expire_at DateTime
  created_at DateTime @default(now())
}

model UserRefreshToken {
  id Int @id @db.UnsignedInt() @default(autoincrement()) 
  user User @relation(fields: [user_id], references: [id])
  user_id Int @db.UnsignedInt()
  /// @zod.string.max(500)
  token String @db.VarChar(500) @unique
  issued_at DateTime
  expire_at DateTime
  created_at DateTime @default(now())
}


// model UserSearch - user id, search term - suggestion selected: boolean, if selected - selection id.
// if not selected - full search page -> search chosen from list

// model CustomFood - user id, food description. 

model Food {
  id Int @id @db.UnsignedInt() @default(autoincrement())
  fdc_id Int? @db.UnsignedInt() @unique
  /// @zod.string.max(500)
  description String @db.VarChar(500) @unique
  food_nutrition FoodNutrition[]
  food_tags FoodTag[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}


//type
// 1 - duplicate fdc id
// 2 - duplicate description
// 3 - both duplicate
model DuplicateFood {
  id Int @id @db.UnsignedInt() @default(autoincrement())
  description String @db.VarChar(500) 
  fdc_id Int @db.UnsignedInt() 
  type Int @db.SmallInt()
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

enum Units {
  G
  IU
  KCAL
  MCG_RE
  MG
  MG_ATE
  MG_GAE
  PH
  SP_GR
  UG
  UMOL_TE
  kJ
}

model Nutrition {
  id Int @id @db.UnsignedInt() @default(autoincrement())
  fdc_nutrient_id Int? @db.UnsignedInt() @unique
  name String @db.VarChar(200) @unique
  unit_name Units?
  nutrient_nbr Int? @db.UnsignedMediumInt() @unique
  rank Int? @db.UnsignedMediumInt()
  food_nutrition FoodNutrition[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

model FoodNutrition {
  id Int @id @db.UnsignedInt() @default(autoincrement())
  food Food @relation(fields: [food_id], references: [id])
  food_id Int @db.UnsignedInt()
  nutrition Nutrition @relation(fields: [nutrition_id], references: [id])
  nutrition_id Int @db.UnsignedInt()
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

model Tag {
  id Int @id @db.UnsignedInt() @default(autoincrement())
  tag_name String @db.VarChar(100) @unique
  food_tags FoodTag[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

model FoodTag {
  id Int @id @db.UnsignedInt() @default(autoincrement())  
  food Food @relation(fields: [food_id], references: [id])
  food_id Int @db.UnsignedInt()
  tag Tag @relation(fields: [tag_id], references: [id])
  tag_id Int @db.UnsignedInt()
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}