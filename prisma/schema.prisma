generator client {
  provider = "prisma-client-js"
}

generator kysely {
    provider = "prisma-kysely"
    output = "./keysley"
    fileName = "types.ts"
    enumFileName = "enums.ts"
}

generator zod-prisma-types {
  provider                         = "zod-prisma-types"
  output                           = "./zod" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is false
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @db.UnsignedInt() @default(autoincrement()) 
  /// @zod.string.max(80)
  username String @db.VarChar(80) @unique
  /// @zod.string.max(126)
  fullname  String @db.VarChar(126)
  /// @zod.string.max(256)
  email String?  @db.VarChar(256) @unique
}

model Food {
  id Int @id @db.UnsignedInt() @default(autoincrement())
  /// @zod.string.max(250)
  description String @db.VarChar(300) @unique
  food_nutrition FoodNutrition?
  food_tags FoodTags[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

model Tag {
  id Int @id @db.UnsignedInt() @default(autoincrement())
  tag_name String @db.VarChar(100) @unique
  food_tags FoodTags[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

model FoodTags {
  id Int @id @db.UnsignedInt() @default(autoincrement())  
  food Food @relation(fields: [food_id], references: [id])
  food_id Int @db.UnsignedInt()
  tag Tag @relation(fields: [tag_id], references: [id])
  tag_id Int @db.UnsignedInt()
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
}

model FoodNutrition {
  id Int @id @db.UnsignedInt() @default(autoincrement())
  food Food @relation(fields: [food_id], references: [id])
  food_id Int @db.UnsignedInt() @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) 
  
  //multiply all the values in the following fields by 1000 before entering them. When showing to frontend, after all calculations are done, divide the values by 1000
  energy Int @db.UnsignedInt()
  protein	Int? @db.UnsignedInt()
  carbohydrate Int? @db.UnsignedInt()
  sugars_total Int? @db.UnsignedInt()
  fiber_total_dietary	Int? @db.UnsignedInt()
  total_fat	Int? @db.UnsignedInt()
  fatty_acids_total_saturated	Int? @db.UnsignedInt()
  fatty_acids_total_monounsaturated	Int? @db.UnsignedInt()
  fatty_acids_total_polyunsaturated	Int? @db.UnsignedInt()
  cholesterol	Int? @db.UnsignedInt()
  retinol	Int? @db.UnsignedInt()
  vitamin_A_RAE Int? @db.UnsignedInt()
  carotene_alpha	Int? @db.UnsignedInt()
  carotene_beta	Int? @db.UnsignedInt()
  cryptoxanthin_beta	Int? @db.UnsignedInt()
  lycopene	Int? @db.UnsignedInt()
  lutein_zeaxanthin	Int? @db.UnsignedInt()
  thiamin	Int? @db.UnsignedInt()
  riboflavin	Int? @db.UnsignedInt()
  niacin	Int? @db.UnsignedInt()
  vitamin_B_6	Int? @db.UnsignedInt()
  folic_acid	Int? @db.UnsignedInt()
  folate_food	Int? @db.UnsignedInt()
  folate_DFE	Int? @db.UnsignedInt()
  folate_total	Int? @db.UnsignedInt()
  choline_total	Int? @db.UnsignedInt()
  vitamin_B_12	Int? @db.UnsignedInt()
  vitamin_B_12added	Int? @db.UnsignedInt()
  vitamin_C	Int? @db.UnsignedInt()
  vitamin_D_D2_D3	Int? @db.UnsignedInt()
  vitamin_E_alpha_tocopherol	Int? @db.UnsignedInt()
  vitamin_Eadded	Int? @db.UnsignedInt()
  vitamin_K_phylloquinone	Int? @db.UnsignedInt()
  calcium	Int? @db.UnsignedInt()
  phosphorus	Int? @db.UnsignedInt()
  magnesium	Int? @db.UnsignedInt()
  iron	Int? @db.UnsignedInt()
  zinc	Int? @db.UnsignedInt()
  copper	Int? @db.UnsignedInt()
  selenium	Int? @db.UnsignedInt()
  potassium	Int? @db.UnsignedInt()
  sodium	Int? @db.UnsignedInt()
  caffeine	Int? @db.UnsignedInt()
  theobromine	Int? @db.UnsignedInt()
  alcohol	Int? @db.UnsignedInt()
  fa_4_0	Int? @db.UnsignedInt()
  fa_6_0	Int? @db.UnsignedInt()
  fa_8_0	Int? @db.UnsignedInt()
  fa_10_0 Int? @db.UnsignedInt()
	fa_12_0 Int? @db.UnsignedInt()
	fa_14_0 Int? @db.UnsignedInt()
	fa_16_0 Int? @db.UnsignedInt()
	fa_18_0 Int? @db.UnsignedInt()
	fa_16_1 Int? @db.UnsignedInt()
	fa_18_1 Int? @db.UnsignedInt()
	fa_20_1 Int? @db.UnsignedInt()
	fa_22_1 Int? @db.UnsignedInt()
	fa_18_2 Int? @db.UnsignedInt()
	fa_18_3 Int? @db.UnsignedInt()
	fa_18_4 Int? @db.UnsignedInt()
	fa_20_4 Int? @db.UnsignedInt()
	fa_20_5_n_3 Int? @db.UnsignedInt()
	fa_22_5_n_3 Int? @db.UnsignedInt()
	fa_22_6_n_3 Int? @db.UnsignedInt()
  water Int? @db.UnsignedInt()
}
